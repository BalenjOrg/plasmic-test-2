// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ih3hS8MosckJQS3c7K8pr
// Component: 6xDo5Nv8gxCS

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: D-JY4r__32sR/component
import ButtonNo from "../../ButtonNo"; // plasmic-import: oPVnB9Uytcc7/component
import ButtonYes from "../../ButtonYes"; // plasmic-import: KEA691y11_-z/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: ih3hS8MosckJQS3c7K8pr/projectcss
import sty from "./PlasmicFeedback.module.css"; // plasmic-import: 6xDo5Nv8gxCS/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: aSRiYRkIBLef/icon
import CrossSvgrepoComsvgIcon from "./icons/PlasmicIcon__CrossSvgrepoComsvg"; // plasmic-import: dU3DbxgzE4et/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: -djxuTl0dHBS/icon
import GuiCheckYesSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__GuiCheckYesSvgrepoCom1Svg"; // plasmic-import: JT-IYkA3E5Jx/icon
import FireSvgrepoComsvgIcon from "./icons/PlasmicIcon__FireSvgrepoComsvg"; // plasmic-import: wdD-e5A8ZlHH/icon

createPlasmicElementProxy;

export type PlasmicFeedback__VariantMembers = {
  yes: "yes";
  no: "no";
};
export type PlasmicFeedback__VariantsArgs = {
  yes?: SingleBooleanChoiceArg<"yes">;
  no?: SingleBooleanChoiceArg<"no">;
};
type VariantPropType = keyof PlasmicFeedback__VariantsArgs;
export const PlasmicFeedback__VariantProps = new Array<VariantPropType>(
  "yes",
  "no"
);

export type PlasmicFeedback__ArgsType = {};
type ArgPropType = keyof PlasmicFeedback__ArgsType;
export const PlasmicFeedback__ArgProps = new Array<ArgPropType>();

export type PlasmicFeedback__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  freeBox?: Flex__<"div">;
  buttonNo?: Flex__<typeof ButtonNo>;
  buttonYes?: Flex__<typeof ButtonYes>;
  text?: Flex__<"div">;
};

export interface DefaultFeedbackProps {
  yes?: SingleBooleanChoiceArg<"yes">;
  no?: SingleBooleanChoiceArg<"no">;
  className?: string;
}

const $$ = {};

function PlasmicFeedback__RenderFunc(props: {
  variants: PlasmicFeedback__VariantsArgs;
  args: PlasmicFeedback__ArgsType;
  overrides: PlasmicFeedback__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "yes",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.yes
      },
      {
        path: "no",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.no
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button, {
          [sty.buttonno]: hasVariant($state, "no", "no"),
          [sty.buttonyes]: hasVariant($state, "yes", "yes")
        })}
        color={"softYellow"}
        isDisabled={true}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <ButtonNo
            data-plasmic-name={"buttonNo"}
            data-plasmic-override={overrides.buttonNo}
            className={classNames("__wab_instance", sty.buttonNo)}
            color={"clear"}
          >
            <CrossSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__kh7VD)}
              role={"img"}
            />
          </ButtonNo>
          <ButtonYes
            data-plasmic-name={"buttonYes"}
            data-plasmic-override={overrides.buttonYes}
            className={classNames("__wab_instance", sty.buttonYes)}
            color={"clear"}
          >
            <GuiCheckYesSvgrepoCom1SvgIcon
              className={classNames(projectcss.all, sty.svg__dtjZv)}
              role={"img"}
            />
          </ButtonYes>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {
              "\u062c\u0648\u0627\u0628 \u0633\u0648\u0627\u0644 \u06a9\u0645\u06a9 \u06a9\u0646\u0646\u062f\u0647 \u0628\u0648\u062f\u061f"
            }
          </div>
          <FireSvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__vLlh7)}
            role={"img"}
          />
        </Stack__>
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "freeBox", "buttonNo", "buttonYes", "text"],
  button: ["button", "freeBox", "buttonNo", "buttonYes", "text"],
  freeBox: ["freeBox", "buttonNo", "buttonYes", "text"],
  buttonNo: ["buttonNo"],
  buttonYes: ["buttonYes"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  freeBox: "div";
  buttonNo: typeof ButtonNo;
  buttonYes: typeof ButtonYes;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeedback__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeedback__VariantsArgs;
    args?: PlasmicFeedback__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeedback__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeedback__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFeedback__ArgProps,
          internalVariantPropNames: PlasmicFeedback__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeedback__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeedback";
  } else {
    func.displayName = `PlasmicFeedback.${nodeName}`;
  }
  return func;
}

export const PlasmicFeedback = Object.assign(
  // Top-level PlasmicFeedback renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    freeBox: makeNodeComponent("freeBox"),
    buttonNo: makeNodeComponent("buttonNo"),
    buttonYes: makeNodeComponent("buttonYes"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicFeedback
    internalVariantProps: PlasmicFeedback__VariantProps,
    internalArgProps: PlasmicFeedback__ArgProps
  }
);

export default PlasmicFeedback;
/* prettier-ignore-end */
